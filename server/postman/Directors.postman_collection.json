{
	"info": {
		"_postman_id": "983ef101-a4db-424c-8205-53c504460c96",
		"name": "Cinema",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "48121817",
		"_collection_link": "https://mjbaca-738a47bb-4287991.postman.co/workspace/Micah's-Workspace~dcfe74e9-aec6-4d2d-8eee-7cf9ca6fa4f1/collection/48121817-983ef101-a4db-424c-8205-53c504460c96?action=share&source=collection_link&creator=48121817"
	},
	"item": [
		{
			"name": "Directors",
			"item": [
				{
					"name": "postDirectors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 (Created)\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"const responseBody = pm.response.json();",
									"const { director } = responseBody;",
									"",
									"pm.test(\"Response has created director with ID\", () => {",
									"  pm.expect(responseBody).to.have.property(\"director\");",
									"  pm.expect(director).to.have.property(\"_id\").that.is.not.null;",
									"});",
									"",
									"pm.test(\"Created director has expected fields & types\", () => {",
									"  pm.expect(director).to.have.property(\"name\").that.is.a(\"string\");",
									"  pm.expect(director).to.have.property(\"birthDate\").that.is.a(\"string\");",
									"  pm.expect(director).to.have.property(\"moviesDirected\").that.is.a(\"number\");",
									"  pm.expect(director).to.have.property(\"retired\").that.is.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Created director values match request body\", () => {",
									"  pm.expect(director.name).to.eql(\"Christopher Nolan\");",
									"  pm.expect(director.moviesDirected).to.eql(5);",
									"  pm.expect(director.retired).to.eql(false);",
									"  pm.expect(director.birthDate.slice(0,10)).to.eql(\"1987-01-01\");",
									"});",
									"",
									"pm.collectionVariables.set(\"directorId\", director._id);",
									"",
									"pm.test(\"Success flag is true\", () => {",
									"  pm.expect(responseBody).to.have.property(\"success\", true);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Christopher Nolan\",\n  \"birthDate\": \"1987-01-01\",\n  \"moviesDirected\": 5,\n  \"retired\": false,\n  \"movies\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/directors",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"directors"
							]
						}
					},
					"response": []
				},
				{
					"name": "getDirectors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 (OK)\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"const responseBody = pm.response.json();",
									"",
									"pm.test(\"Response has director array\", () => {",
									"  pm.expect(responseBody).to.have.property(\"director\");",
									"  pm.expect(responseBody.director).to.be.an(\"array\");",
									"});",
									"",
									"pm.test(\"Director objects (if any) have required fields & types\", () => {",
									"  if (responseBody.director.length > 0) {",
									"    const d = responseBody.director[0];",
									"    pm.expect(d).to.have.property(\"_id\");",
									"    pm.expect(d).to.have.property(\"name\").that.is.a(\"string\");",
									"    pm.expect(d).to.have.property(\"birthDate\").that.is.a(\"string\");",
									"    pm.expect(d).to.have.property(\"moviesDirected\").that.is.a(\"number\");",
									"    pm.expect(d).to.have.property(\"retired\").that.is.a(\"boolean\");",
									"  }",
									"});",
									"",
									"if (responseBody.director.length > 0 && !pm.collectionVariables.get(\"directorId\")) {",
									"  pm.collectionVariables.set(\"directorId\", responseBody.director[0]._id);",
									"}",
									"",
									"pm.test(\"Success flag is true\", () => {",
									"  pm.expect(responseBody).to.have.property(\"success\", true);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/v1/directors/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"directors",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "getDIrectorById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 (OK)\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"const responseBody = pm.response.json();",
									"const { director } = responseBody;",
									"",
									"pm.test(\"Response has director with required fields & types\", () => {",
									"  pm.expect(responseBody).to.have.property(\"director\");",
									"  pm.expect(director).to.have.property(\"_id\");",
									"  pm.expect(director).to.have.property(\"name\").that.is.a(\"string\");",
									"  pm.expect(director).to.have.property(\"birthDate\").that.is.a(\"string\");",
									"  pm.expect(director).to.have.property(\"moviesDirected\").that.is.a(\"number\");",
									"  pm.expect(director).to.have.property(\"retired\").that.is.a(\"boolean\");",
									"});",
									"",
									"pm.test(\"Director values match expected (Christopher Nolan, 5, false, 1987-01-01)\", () => {",
									"  pm.expect(director.name).to.eql(\"Christopher Nolan\");",
									"  pm.expect(director.moviesDirected).to.eql(5);",
									"  pm.expect(director.retired).to.eql(false);",
									"  pm.expect(director.birthDate.slice(0,10)).to.eql(\"1987-01-01\");",
									"});",
									"",
									"pm.collectionVariables.set(\"directorId\", director._id);",
									"",
									"pm.test(\"Success flag is true\", () => {",
									"  pm.expect(responseBody).to.have.property(\"success\", true);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/v1/directors/{{directorId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"directors",
								"{{directorId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "putDirectors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 (Updated)\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"const responseBody = pm.response.json();",
									"const { director } = responseBody;",
									"",
									"pm.test(\"Response returns updated director with required fields & types\", () => {",
									"  pm.expect(responseBody).to.have.property(\"director\");",
									"  pm.expect(director).to.have.property(\"_id\");",
									"  pm.expect(director).to.have.property(\"name\").that.is.a(\"string\");",
									"  pm.expect(director).to.have.property(\"moviesDirected\").that.is.a(\"number\");",
									"  pm.expect(director).to.have.property(\"retired\").that.is.a(\"boolean\");",
									"  pm.expect(director).to.have.property(\"birthDate\").that.is.a(\"string\");",
									"});",
									"",
									"pm.test(\"Updated values match expected\", () => {",
									"  pm.expect(director.name).to.eql(\"Christopher Nolan\");",
									"  pm.expect(director.moviesDirected).to.eql(6);",
									"  pm.expect(director.retired).to.eql(false);",
									"  pm.expect(director.birthDate.slice(0,10)).to.eql(\"1987-01-01\");",
									"});",
									"",
									"pm.test(\"Success flag is true\", () => {",
									"  pm.expect(responseBody).to.have.property(\"success\", true);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Christopher Nolan\",\n  \"birthDate\": \"1987-01-01\",\n  \"moviesDirected\": 6,\n  \"retired\": false,\n  \"movies\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/directors/{{directorId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"directors",
								"{{directorId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "deleteDirectors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 (Deleted)\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"const responseBody = pm.response.json();",
									"",
									"pm.test(\"Response confirms deletion\", () => {",
									"  pm.expect(responseBody).to.have.property(\"success\", true);",
									"  pm.expect(responseBody.message).to.include(\"DELETE\");",
									"});",
									"",
									"pm.test(\"Response has expected keys\", () => {",
									"  pm.expect(responseBody).to.have.keys([\"message\", \"success\"]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/v1/directors/{{directorId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"directors",
								"{{directorId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "directorId",
			"value": ""
		}
	]
}